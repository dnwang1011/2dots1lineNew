generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                   @id @default(uuid()) @db.Uuid
  email             String                   @unique
  firstName         String?
  lastName          String?
  passwordHash      String
  createdAt         DateTime                 @default(now())
  phone             String?
  wechat_id         String?
  subscription_plan String?
  gender            String?
  age               Int?
  city              String?
  chunkEmbeddings   ChunkEmbedding[]
  episodes          Episode[]
  fileUploadJobs    FileUploadJob[]
  ontologyProposals OntologyChangeProposal[]
  rawData           RawData[]
  thoughts          Thought[]
}

model RawData {
  id                 String           @id @default(cuid())
  content            String
  contentType        String
  topicKey           String?
  createdAt          DateTime         @default(now())
  userId             String           @db.Uuid
  sessionId          String
  perspectiveOwnerId String           @db.Uuid
  subjectId          String?          @db.Uuid
  importanceScore    Float?
  processedAt        DateTime?
  processingError    String?
  processingStatus   String           @default("pending")
  metadata           Json?
  chunkEmbeddings    ChunkEmbedding[]
  episodes           Episode[]
  user               User             @relation(fields: [userId], references: [id])
  thoughts           Thought[]

  @@index([userId])
  @@index([sessionId])
  @@index([perspectiveOwnerId])
  @@index([createdAt])
}

model ChunkEmbedding {
  id               String         @id @default(cuid())
  rawDataId        String
  text             String
  summary          String?
  importance       Float
  createdAt        DateTime       @default(now())
  userId           String         @db.Uuid
  index            Int
  processingStatus String         @default("pending")
  sessionId        String
  tokenCount       Int
  metadata         Json?
  rawData          RawData        @relation(fields: [rawDataId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id])
  episodes         ChunkEpisode[]

  @@index([userId])
  @@index([sessionId])
}

model Episode {
  id          String           @id @default(cuid())
  title       String
  narrative   String
  centroidVec Float[]
  centroidDim Int
  occurredAt  DateTime?
  createdAt   DateTime         @default(now())
  userId      String           @db.Uuid
  rawDataId   String?
  chunks      ChunkEpisode[]
  rawData     RawData?         @relation(fields: [rawDataId], references: [id])
  user        User             @relation(fields: [userId], references: [id])
  thoughts    EpisodeThought[]

  @@index([userId])
  @@index([rawDataId])
}

model Thought {
  id          String           @id @default(cuid())
  name        String
  description String
  vector      Float[]
  dimension   Int
  createdAt   DateTime         @default(now())
  userId      String           @db.Uuid
  rawDataId   String?
  episodes    EpisodeThought[]
  rawData     RawData?         @relation(fields: [rawDataId], references: [id])
  user        User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([rawDataId])
}

model ChunkEpisode {
  chunkId   String
  episodeId String
  addedAt   DateTime       @default(now())
  chunk     ChunkEmbedding @relation(fields: [chunkId], references: [id], onDelete: Cascade)
  episode   Episode        @relation(fields: [episodeId], references: [id], onDelete: Cascade)

  @@id([chunkId, episodeId])
  @@unique([chunkId, episodeId], map: "ChunkEpisode_unique_constraint")
}

model EpisodeThought {
  episodeId String
  thoughtId String
  weight    Float?
  episode   Episode @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  thought   Thought @relation(fields: [thoughtId], references: [id], onDelete: Cascade)

  @@id([episodeId, thoughtId])
  @@unique([episodeId, thoughtId], map: "EpisodeThought_unique_constraint")
}

model OntologyVersion {
  id          String     @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  active      Boolean    @default(true)
  edgeTypes   EdgeType[]
  nodeTypes   NodeType[]
}

model NodeType {
  id                String          @id @default(cuid())
  name              String
  description       String?
  properties        Json?
  synonyms          String[]
  ontologyVersionId String
  createdAt         DateTime        @default(now())
  ontologyVersion   OntologyVersion @relation(fields: [ontologyVersionId], references: [id])

  @@index([ontologyVersionId])
}

model EdgeType {
  id                String          @id @default(cuid())
  name              String
  description       String?
  fromNodeTypes     String[]
  toNodeTypes       String[]
  properties        Json?
  ontologyVersionId String
  createdAt         DateTime        @default(now())
  ontologyVersion   OntologyVersion @relation(fields: [ontologyVersionId], references: [id])

  @@index([ontologyVersionId])
}

model OntologyChangeProposal {
  id                 String    @id @default(cuid())
  type               String
  description        String
  proposedDefinition Json
  justification      String
  examples           String[]
  status             String    @default("pending")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  userId             String    @db.Uuid
  reviewedById       String?   @db.Uuid
  reviewedAt         DateTime?
  user               User      @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([userId])
}

model FileUploadJob {
  id           String    @id @default(uuid()) @db.Uuid
  userId       String    @db.Uuid
  sessionId    String
  status       String    @default("PENDING")
  filename     String
  filePath     String
  fileSize     Int
  mimeType     String
  message      String?
  resultData   Json?
  errorMessage String?
  createdAt    DateTime  @default(now())
  startedAt    DateTime?
  completedAt  DateTime?
  user         User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([sessionId])
  @@index([status])
  @@index([createdAt])
}
