generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                   @id @default(uuid()) @db.Uuid
  email             String                   @unique
  firstName         String?
  lastName          String?
  passwordHash      String
  createdAt         DateTime                 @default(now())
  phone             String?
  wechat_id         String?
  subscription_plan String?
  gender            String?
  age               Int?
  city              String?
  episodes          Episode[]
  chunkEmbeddings   ChunkEmbedding[]
  thoughts          Thought[]
  ontologyProposals OntologyChangeProposal[]
  rawData           RawData[]
}

model RawData {
  id                 String          @id @default(cuid())
  content            String
  contentType        String
  topicKey           String?
  createdAt          DateTime        @default(now())
  userId             String          @db.Uuid
  sessionId          String
  perspectiveOwnerId String          @db.Uuid
  subjectId          String?         @db.Uuid
  importanceScore    Float?
  processedAt        DateTime?
  processingError    String?
  processingStatus   String          @default("pending")
  chunkEmbeddings    ChunkEmbedding[]
  episodes           Episode[]
  user               User            @relation(fields: [userId], references: [id])
  thoughts           Thought[]

  @@index([userId])
  @@index([sessionId])
  @@index([perspectiveOwnerId])
  @@index([createdAt])
}

model ChunkEmbedding {
  id           String   @id @default(cuid())
  rawDataId    String
  text         String     // full chunk text (<= 4 KB)
  summary      String?    // first-pass LLM TL;DR
  vector       Float[]
  dimension    Int
  importance   Float      // 0-1
  metadata     String?    // JSON string for additional metadata (including forceImportant flag)
  createdAt    DateTime   @default(now())
  userId       String     @db.Uuid
  episodes     ChunkEpisode[] // â‡„ many-to-many
  user         User        @relation(fields: [userId], references: [id])
  rawData      RawData     @relation(fields: [rawDataId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model Episode {
  id           String    @id @default(cuid())
  title        String
  narrative    String
  centroidVec  Float[]   // âž• Added
  centroidDim  Int       // âž• Added
  occurredAt   DateTime?
  createdAt    DateTime  @default(now())
  userId       String    @db.Uuid
  rawDataId    String?   // âž• Added back reference
  chunks       ChunkEpisode[]   // âž• Added
  thoughts     EpisodeThought[] // âž• Added
  user         User        @relation(fields: [userId], references: [id])
  rawData      RawData?    @relation(fields: [rawDataId], references: [id]) // âž• Added relation

  @@index([userId])
  @@index([rawDataId]) // âž• Added index for rawDataId
}

model Thought {
  id           String   @id @default(cuid())
  name         String   // short label ("Musical Identity Crisis") - Changed from 'title'
  description  String   // free-form insight text - Changed from 'content'
  vector       Float[]  // âž• Added
  dimension    Int      // âž• Added
  createdAt    DateTime @default(now())
  userId       String   @db.Uuid
  rawDataId    String?  // âž• Added back reference
  episodes     EpisodeThought[] // âž• Added
  user         User @relation(fields: [userId], references: [id])
  rawData      RawData? @relation(fields: [rawDataId], references: [id]) // âž• Added relation

  @@index([userId])
  @@index([rawDataId]) // âž• Added index for rawDataId
}

model ChunkEpisode {
  chunkId   String
  episodeId String
  addedAt   DateTime @default(now())
  @@id([chunkId, episodeId])
  chunk     ChunkEmbedding @relation(fields: [chunkId], references: [id], onDelete: Cascade)
  episode   Episode        @relation(fields: [episodeId], references: [id], onDelete: Cascade)
}

model EpisodeThought {
  episodeId String
  thoughtId String
  weight    Float?   // optional "relevance weight"
  @@id([episodeId, thoughtId])
  episode   Episode  @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  thought   Thought  @relation(fields: [thoughtId], references: [id], onDelete: Cascade)
}

model OntologyVersion {
  id          String     @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  active      Boolean    @default(true)
  edgeTypes   EdgeType[]
  nodeTypes   NodeType[]
}

model NodeType {
  id                String          @id @default(cuid())
  name              String
  description       String?
  properties        Json?
  synonyms          String[]
  ontologyVersionId String
  createdAt         DateTime        @default(now())
  ontologyVersion   OntologyVersion @relation(fields: [ontologyVersionId], references: [id])

  @@index([ontologyVersionId])
}

model EdgeType {
  id                String          @id @default(cuid())
  name              String
  description       String?
  fromNodeTypes     String[]
  toNodeTypes       String[]
  properties        Json?
  ontologyVersionId String
  createdAt         DateTime        @default(now())
  ontologyVersion   OntologyVersion @relation(fields: [ontologyVersionId], references: [id])

  @@index([ontologyVersionId])
}

model OntologyChangeProposal {
  id                 String    @id @default(cuid())
  type               String
  description        String
  proposedDefinition Json
  justification      String
  examples           String[]
  status             String    @default("pending")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  userId             String    @db.Uuid
  reviewedById       String?   @db.Uuid
  reviewedAt         DateTime?
  user               User      @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([userId])
}

// ------------- V1 MODELS (TEMPORARY) -------------
// ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ DELETED SemanticChunk MODEL ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥
// ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ DELETED Embedding MODEL ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥
// ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ DELETED EmbeddingUpdate MODEL ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥
// ------------- END V1 MODELS -------------


// -------------- MEMORY v2 --------------
